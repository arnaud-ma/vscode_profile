global
function command(context) {
	return context.scopes.some(s => (s == "meta.space-after-command.latex" ||
									 s == "constant.other.general.math.texx" ||
									 s == "meta.function.environment.latex" ||
									 s == "support.function.general.tex"
									 ));
}

function math(context) {
	math_scope =  context.scopes.some(s => s.startsWith("meta.math"));
	return math_scope && !command(context);
}

function notmath(context) {
	math_scope =  context.scopes.some(s => s.startsWith("meta.math"));
	return !math_scope && !command(context);
}
endglobal











#--------------------------------------------#
#----------------ENVIRONMENTS----------------#
#--------------------------------------------#










context !command(context)
snippet begg "begin custom env" iA
\begin{${1:eg}}
	$0
\end{${1:eg}}
endsnippet

# You can add any custom environment here, for example:
# context notmath(context)
# snippet Thm "Theorem" bwA
# \begin{theorem}\label{thm $1}
# 	$0
# \end{theorem}
# endsnippet

context notmath(context)
snippet proof "Proof" bwA
\begin{proof}
	$0
\end{proof}
endsnippet


context notmath(context)
snippet `(s|ss|)(Sec)` "Section" bwA
\``
switch (m[1]) {
	case "s":
		rv = "sub";
		break;
	case "ss":
		rv = "subsub";
		break;
};
``section{$1}\label{``rv=m[1]``sec ${2:$1}}
$0
endsnippet


#-------------Listings-------------#

snippet enum "Enumerate" bA
\begin{enumerate}
	\item $0
\end{enumerate}
endsnippet

context notmath(context)
snippet item "Itemize" bA
\begin{itemize}
	\item $0
\end{itemize}
endsnippet

#--------------Maths---------------#

snippet fm "inline Math" wA
\( $1 \) $0
endsnippet

snippet dm "display Math" iA
\[
	$1
\] $0
endsnippet



#------------Equations-------------#

context notmath(context)
snippet ali "Align" bA
\begin{align}
	$1
\end{align}
endsnippet

context notmath(context)
snippet equa "Equation" bA
\begin{equation}
	$1
\end{equation}
endsnippet

# must \usepackage{mathtools}
context math(context)
snippet `([1-9]\d*)(s|)case` "cases" iA
\begin{dcases}``
	let order = 1;
	rv = '\n';
	let sinon = m[2]=='s';
	let sim = sinon ? m[1]-1 : m[1];
	for (var i = 1; i <= sim; i++) {
		rv += `\t ${snip.tabstop(order)}, & \\text{ if } ${snip.tabstop(order+1)}\\\\\\\n`;
		order += 2;
	};
	if (sinon) {
		rv += `\t ${snip.tabstop(order)}, & \\text{ otherwise }\n`
	};
``\end{dcases}
$0
endsnippet

#---------Table / Matrix-----------#


snippet `table([1-9]\d*)\ ([1-9]\d*) ` "Table environment" bA
\begin{table}[H]
	\centering
	\begin{tabular}{``rv = "c".repeat(m[2])``}
	    \toprule``
			let order = 3; // 1 = caption, 2 = label (see below tabular)
			nrow = m[1];
			ncol = m[2];

			// iterate over rows and columns to get the result :
			// 1 & 2 & ... & ncol-1 & ncol \\
			// \midrule (a line ---------------------)
			// 4 & 5 & ... & ncol+3 & ncol+4 \\
			// ...
			// nrow*ncol-ncol+1 & nrow*ncol-ncol+2 & ... & nrow*ncol-1 & nrow*ncol
			// and add the tabstop to the result
			for (var i=1; i<nrow; i++){

				// loop for the columns:
				// 1 & 2 & ... & ncol-1 &
				for(var j=1; j<ncol; j++){
					rv += `${snip.tabstop(order)} & `;
					order ++;
				}

				// last column: add "ncol \\" to "1 & 2 & ... & ncol-1 &"
				rv += ` ${snip.tabstop(order)} \\\\`+ `\\`+ `\n`;

				// add the line \midrule after the first row
				if(i == 1){
					rv += `\t`.repeat(3) + `\\midrule` + `\n`;
				}

				// indent the next row
				rv += '\t'.repeat(3);
				order ++;
			}

			// last row
			for(var j=1; j<ncol; j++){
				rv += `${snip.tabstop(order)} & `;
				order ++;
			}
			rv += ` ${snip.tabstop(order)} \\\\` + `\\`;``
    	\bottomrule
	\end{tabular}
	\caption{${1:caption}}
	\label{tab:${2:label}}
\end{table}
endsnippet

# works like this: "(fill_in_cells)(b|B|p|v|V)mat(nrow) (ncol) "
# fill_in_cell and b|B|p|v|V are optional (blank by default)
# will create a nrows x ncols matrix:
# \begin{(b|B|p|v|V)matrix}
# 	fill_in_cell & fill_in_cell & ... & fill_in_cell \\
# 	...
# \end{(b|B|p|v|V)matrix}
context math(context)
snippet `(?<![\\a-zA-Z]) (.+?)(b|B|p|v|V|)mat([1-9]\d*) ([1-9]\d*) ` "matrix" iwA
\begin{``rv = m[2]``matrix}``
	let order = 1;
	let fill_char = m[1];
	let nrow = m[3];
	let ncol = m[4];
	rv = `\n`;
	for (var i=0; i<nrow; i++){
		rv += '	';
		for(var j = 0;j <ncol-1;j++){
			rv += `${snip.tabstop(order, fill_char)} & `;
			order ++;
		}
		rv += ` ${snip.tabstop(order, fill_char)} \\\\`+ `\\`+ `\n`;
		order ++;
	}
	``\end{``rv = m[2]``matrix}$0
endsnippet





#--------------------------------------------#
#-------------TABLES / MATRICES--------------#
#--------------------------------------------#



# https://tex.stackexchange.com/questions/35174/best-way-to-create-an-system-of-equations-environment/35176#35176
# must \usepackage{systeme}
context math(context)
snippet sys "System of equations" A
\systeme{
	$1
}$0
endsnippet


context math(context)
snippet func "Fonction / Function" A
\\displaystyle\\begin{aligned}[t]
$1: & $2 &\longrightarrow $3 \\\[-0.5em]
& $4 &\longmapsto $5
\end{aligned}
endsnippet










#-----------------------------------------------------#
#--------------------LETTERS / SYMBOLS----------------#
#-----------------------------------------------------#
# (?<![\\a-zA-Z]) means that the letter must not be preceded by a letter or a backslash










#----------Greek letters-----------#


context math(context)
snippet `(?<![\\a-zA-Z]);m` "\mu" A
\mu $0
endsnippet

context math(context)
snippet `(?<![\\a-zA-Z]);a` "\alpha" A
\alpha $0
endsnippet

context math(context)
snippet `(?<![\\a-zA-Z]);s` "\sigma" A
\sigma $0
endsnippet
context math(context)
snippet `(?<![\\a-zA-Z]);S` "\Sigma" A
\Sigma $0
endsnippet

context math(context)
snippet `(?<![\\a-zA-Z]);r` "\rho" A
\rho $0
endsnippet

context math(context)
snippet `(?<![\\a-zA-Z]);b` "\beta" A
\beta $0
endsnippet

context math(context)
snippet `(?<![\\a-zA-Z]);g` "\gamma" A
\gamma $0
endsnippet
context math(context)
snippet `(?<![\\a-zA-Z]);G` "\Gamma" A
\Gamma $0
endsnippet

context math(context)
snippet `(?<![\\a-zA-Z]);d` "\delta" A
\delta $0
endsnippet
context math(context)
snippet `(?<![\\a-zA-Z]);D` "\Delta" A
\Delta $0
endsnippet

context math(context)
snippet `(?<![\\a-zA-Z]);z` "\zeta" A
\zeta $0
endsnippet

context math(context)
snippet `(?<![\\a-zA-Z]);e` "\eta" A
\eta $0
endsnippet

context math(context)
snippet `(?<![\\a-zA-Z]);t` "\theta" A
\theta $0
endsnippet
context math(context)
snippet `(?<![\\a-zA-Z]);vt` "\vartheta" A
\vartheta $0
endsnippet

context math(context)
snippet `(?<![\\a-zA-Z]);T` "\Theta" A
\Theta $0
endsnippet

priority 2
context math(context)
snippet `(?<![\\a-zA-Z]);;t` "\tau" A
\tau $0
endsnippet

context math(context)
snippet `(?<![\\a-zA-Z]);i` "\iota" A
\iota $0
endsnippet

context math(context)
snippet `(?<![\\a-zA-Z]);k` "\kappa" A
\kappa $0
endsnippet

context math(context)
snippet `(?<![\\a-zA-Z]);l` "\lambda" A
\lambda $0
endsnippet
context math(context)
snippet `(?<![\\a-zA-Z]);L` "\Lambda" A
\Lambda $0
endsnippet

context math(context)
snippet `(?<![\\a-zA-Z]);n` "\nu" A
\nu $0
endsnippet

priority 2
context math(context)
snippet `(?<![\\a-zA-Z]);;n` "\nabla" iA
\nabla $0
endsnippet

context math(context)
snippet `(?<![\\a-zA-Z]);p` "\pi" A
\pi$0
endsnippet
context math(context)
snippet `(?<![\\a-zA-Z]);P` "\Pi" A
\Pi $0
endsnippet

context math(context)
snippet `(?<![\\a-zA-Z]);r` "\rho" A
\rho $0
endsnippet

context math(context)
snippet `(?<![\\a-zA-Z]);t` "\tau" A
\tau $0
endsnippet

context math(context)
snippet `(?<![\\a-zA-Z]);u` "\upsilon" A
\upsilon $0
endsnippet
context math(context)
snippet `(?<![\\a-zA-Z]);U` "\Upsilon" A
\Upsilon $0
endsnippet

priority 2
context math(context)
snippet `(?<![\\a-zA-Z]);;p` "\phi" A
\phi $0
endsnippet
priority 2
context math(context)
snippet `(?<![\\a-zA-Z]);;P` "\Phi" A
\Phi $0
endsnippet

context math(context)
snippet `(?<![\\a-zA-Z]);vp` "\varphi" A
\varphi $0
endsnippet

context math(context)
snippet `(?<![\\a-zA-Z]);c` "\chi" A
\chi $0
endsnippet

priority 3
context math(context)
snippet `(?<![\\a-zA-Z])psi` "\psi" A
\psi $0
endsnippet
priority 3
context math(context)
snippet `(?<![\\a-zA-Z]);;;P` "\Psi" A
\Psi $0
endsnippet

context math(context)
snippet `(?<![\\a-zA-Z]);o` "\omega" A
\omega $0
endsnippet
context math(context)
snippet `(?<![\\a-zA-Z]);O` "\Omega" A
\Omega $0
endsnippet

context math(context)
snippet `(?<![\\a-zA-Z]);x` "\xi" A
\xi $0
endsnippet
context math(context)
snippet `(?<![\\a-zA-Z]);X` "\Xi" A
\Xi $0
endsnippet

context math(context)
snippet `(?<![\\a-zA-Z]);eps` "\epsilon" A
\epsilon $0
endsnippet

priority 1
context math(context)
snippet `(?<![\\a-zA-Z])ell` "\ell" A
\ell $0
endsnippet

#----------Other symbols-----------#

context math(context)
snippet `(?<![\\a-zA-Z])oo` "\infty" A
\infty $0
endsnippet

# Recommended : \renewcommand{\emptyset}{\O}
context math(context)
snippet `(?<![\\a-zA-Z])empty` "\emptyset" A
\emptyset $0
endsnippet

context math(context)
snippet ... "dots" iA
\ldots $0
endsnippet











#--------------------------------------------#
#-----------------REDACTIONS-----------------#
#--------------------------------------------#









#------------font style------------#

context math(context)
snippet txt "text" iA
\text{$1} $0
endsnippet

# underLine instead of underline for better underlining
# but must use \usepackage{lua-ul} in the preamble and compile with lualatex
snippet uline "Underline" iA
\underLine{$1} $0
endsnippet

context notmath(context)
snippet bf "Bold font text" A
\textbf{$1} $0
endsnippet

context notmath(context)
snippet `(?<![\\a-zA-Z])(\S*)(b|B)(f)` " 'somethingbf' -> textbf{something} " A
\textbf{``rv = m[1]``} $0
endsnippet

# \usepackage{bm}
context math(context)
snippet bf "Bold font math" A
\bm{$1} $0
endsnippet

# \usepackage{bm}
context math(context)
snippet `(?<![\\a-zA-Z])(\S*)(b|B)(f)` " 'somethingbf' -> mathbf{something} " A
\bm{``rv = m[1]``} $0
endsnippet

context notmath(context)
snippet ital "Italic text" iA
\textit{$1} $0
endsnippet

context math(context)
snippet ital "Italic math" iA
\mathit{$1} $0
endsnippet

snippet emph "emph" iA
\emph{$1}$0
endsnippet

context math(context)
snippet rm "mathrm" iA
\mathrm{$1} $0
endsnippet


# \usepackage{mathrsfs}
context math(context)
snippet scr "mathscr font" iA
\mathscr{$1} $0
endsnippet


# on math or not :
# F# -> \mathbb{F}
# F## -> \mathcal{F}
# F#" -> \mathtt{F}

# \usepackage{amsfonts}
context math(context)
snippet `\b([A-Z])#` "[G] Math bb" A
`` rv = `\\mathbb{${m[1]}}` ``
endsnippet

# \usepackage{amsfonts}
context math(context)
snippet `\\mathbb{([A-Z])}#` "[G] Math cal (F##)" A
`` rv = `\\mathcal{${m[1]}}` ``
endsnippet

# \usepackage{amsfonts}
context math(context)
snippet `\\mathbb{([A-Z])}"` "[G] Math tt (F#quote)" A
`` rv = `\\mathtt{${m[1]}}` ``
endsnippet

# \usepackage{amsfonts}
context notmath(context)
snippet `\b([A-Z])#` "[G] Math bb in text" A
\(`` rv = `\\mathbb{${m[1]}}` ``\)
endsnippet

# \usepackage{amsfonts}
context notmath(context)
snippet `\\mathbb{([A-Z])}\\\)#` "[G] Math cal (F##) in text" A
`` rv = `\\mathcal{${m[1]}}` ``\) $0
endsnippet

# \usepackage{amsfonts}
context notmath(context)
snippet `\\mathbb{([A-Z])}\\\)"` "[G] Math tt (F#quote) in text" A
`` rv = `\\mathtt{${m[1]}}` ``\) $0
endsnippet

#------------Operations-------------#

context math(context)
snippet // "Fraction" iA
\\frac{$1}{$2}$0
endsnippet

# \usepacakge{xfrac} in the preamble
# create inlined fraction with \sfrac{}{}
priority 2
context math(context)
snippet .// "Fraction one line" iA
\sfrac{$1}{$2}$0
endsnippet

priority 3
context math(context)
snippet `((\d+)(\.|)|(\d*)(\\)?([A-Za-z]+)((\^|_)(\{\d+\}|\d))*(\.|))/` "Fraction no ()" A
\``if (m[1].slice(-1) == ".")
	rv = `sfrac{${m[1].slice(0,-1)}}`;
else
	rv = `frac{${m[0].slice(0, -1)}}`;
``{$1}$0
endsnippet

snippet `^.*\)/` "Fraction with ()" Am
``
    let str = m[0];
    str = str.slice(0, -1);
    let lastIndex = str.length - 1;

    let depth = 0;
    let i = str.length - 1;

    while (true) {
        if (str[i] == ')') depth += 1;
        if (str[i] == '(') depth -= 1;
        if (depth == 0) break;
        i -= 1;
    }

    let results = str.slice(0, i) + "\\frac{" + str.slice(i+1, -1) + "}";
    rv = results;
	rv += `{${snip.tabstop(1)}}${snip.tabstop(0)}`;
    ``
endsnippet

context math(context)
snippet `o\+` "oplus" A
\oplus $0
endsnippet

priority 2
context math(context)
snippet `o(x\.|\.x)` "otimes" A
\otimes $0
endsnippet

context math(context)
snippet `(x\.|\.x)` "times" A
\times $0
endsnippet

context math(context)
snippet '+-|pm' "plus minus" A
\pm $0
endsnippet


#------------Relations-------------#


context math(context)
snippet `>=|(?<!\\)geq` "greater or equal to" A
\geq $0
endsnippet

context math(context)
snippet `<=|(?<!\\)leq` "less or equal to" A
\leq $0
endsnippet

context math(context)
snippet `!=|(?<!\\)neq` "not equal" A
\neq $0
endsnippet

context math(context)
snippet =d "equal with def above" A
\overset{\mathrm{def}}{=} $0
endsnippet

context math(context)
snippet := "definition in math (left)" iA
\coloneqq $0
endsnippet

context math(context)
snippet =: "definition in math (right)" iA
\eqqcolon $0
endsnippet

priority 2
context math(context)
snippet suc "succeeds ≻" iA
\succ $0
endsnippet

context math(context)
snippet seq "succeeds or equal to ⪰" iA
\succeq $0
endsnippet

context math(context)
snippet prec "precedes ≺" iA
\prec $0
endsnippet

context math(context)
snippet peq "precedes or equal to ⪯" iA
\preceq $0
endsnippet

context math(context)
snippet == "constan equal ≡" iA
\equiv $0
endsnippet

context math(context)
snippet ~~ "approx equal ≈" iA
\thickapprox $0
endsnippet

context math(context)
snippet ~= "approx equal(2) ≅" iA
\cong $0
endsnippet

context math(context)
snippet ~- "approx equal(3) ≃" iA
\simeq $0
endsnippet

priority 2
context math(context)
snippet `(?<!\\)sim` "sim ~" A
\sim $0
endsnippet

context math(context)
snippet circ "composition ∘" iA
\circ $0
endsnippet

context math(context)
snippet @> "inclusion map ↪" iA
\hookrightarrow $0
endsnippet

context math(context)
snippet >> ">>" iA
\gg $0
endsnippet

context math(context)
snippet << "<<" iA
\ll $0
endsnippet

context math(context)
snippet prp "perp" iA
^{\perp} $0
endsnippet

context math(context)
snippet -- "setminus" iA
\setminus $0
endsnippet


#------------Operators-------------#


context math(context)
snippet sum "sum" iA
\sum\limits_{${1:i}} $0
endsnippet

priority 2
context math(context)
snippet ssum "small sum" iA
\sum_{${1:i}} $0
endsnippet

context math(context)
snippet Sum "infinite sum" wA
\sum\limits_{${1:i}=${2:1}}^{${3:\infty}} $0
endsnippet

priority 2
context math(context)
snippet ssum "small sum" iA
\sum_{${1:i}} $0
endsnippet

priority 2
context math(context)
snippet sSum "small infinite sum" wA
sum_{${1:i}=${2:1}}^{${3:\infty}} $0
endsnippet


priority 1
context math(context)
snippet dint "integral" iA
\int_{${1:-\infty}}^{${2:+\infty}} ${3} \\,\mathrm{d}${4:x} $0
endsnippet

context math(context)
snippet `(?<!\\)int` "integral without anything" iA
\int $0
endsnippet

# only works for 1 to 9 integrals
priority 2
context math(context)
snippet `(?<!\\)([1-9])Dint` "Multiple integral" iA
\\``rv = "i".repeat(m[1])``nt_{${1:D}} ``
	rv = `${snip.tabstop(2)} \\,` `` ``
	rv = '';
	let order = 3;
	for (var i = 0; i < m[1]; i++) {
		rv += `\\mathrm{d} ${snip.tabstop(order)} \\\,`;
		order ++;
	}; `` $0
endsnippet

context math(context)
snippet pt "\partial" iA
\partial $0
endsnippet

priority 1
context math(context)
snippet pdif "d/dx" iA
\frac{\partial ${1:V}}{\partial ${2:x}} $0
endsnippet

context math(context)
snippet dif "d/dx" iA
\frac{\mathrm{d}${1:y}}{\mathrm{d}${2:x}} $0
endsnippet

priority 2
context math(context)
snippet nlim "nolimit" iA
\nolimits
endsnippet

context math(context)
snippet lim "limit" iA
\lim\limits_{${1:n} \to ${2:\infty}}
endsnippet

context math(context)
snippet To "arrow limit" iA
\xrightarrow[${1:n} \to ${2:+\infty}]{} $0
endsnippet

priority 3
context math(context)
snippet lsup "limsup" iA
\lim\limitssup_{${1:n} \to ${2:\infty}}
endsnippet

priority 3
context math(context)
snippet linf "liminf" iA
\lim\limitsinf_{${1:n} \to ${2:\infty}}
endsnippet

#--------------Logic---------------#

priority 2
context math(context)
snippet EE "exist" iA
\exists
endsnippet

priority 2
context math(context)
snippet AA "forall" iA
\forall
endsnippet

context math(context)
snippet inn "in" iA
 \in $0
endsnippet

priority 2
context math(context)
snippet ninn "not in" iA
\in $0
endsnippet

context math(context)
snippet => "implies" iA
\implies $0
endsnippet

context math(context)
snippet =< "implied by" iA
\impliedby $0
endsnippet

priority 2
context math(context)
snippet iff "if and only if <=> math" iA
\iff $0
endsnippet

context math(context)
snippet :: "colon :" iA
\colon $0
endsnippet

context math(context)
snippet `->|(?<!\\)to` "to" A
\to $0
endsnippet

context math(context)
snippet !> "mapsto" iA
\mapsto $0
endsnippet


#------------Functions-------------#

context math(context)
snippet oper "operator" iA
\operatorname{$1} $0
endsnippet

context math(context)
snippet `(sin|cos|cot|csc|ln|log|exp|perp|inf|sup|Tr|diag|det|dim|ker|Im|Re|arg|min|max|sgn)` "functions" wA
\\``rv = m[1]`` $0
endsnippet

context math(context)
snippet `(?<!\\)sq` "\sqrt{}" A
\sqrt{${1}} $0
endsnippet

priority 2
context math(context)
snippet `(?<!\\)a(sin|cos|tan|cot|csc|sec)` "arc-triangle" wA
\\arc``rv = m[1]`` $0
endsnippet

# \usepackage{amsmath}
# \DeclareMathOperator*{\argmin}{arg\,min}
# \DeclareMathOperator*{\argmax}{arg\,max}
priority 2
context math(context)
snippet `(?<!\\)a(max|min)` "arg min/max" wA
\arg``rv = m[2]``_{$1} $0
endsnippet

context math(context)
snippet ind "indicator function" iA
\mathbbm{1}_{$1} $0
endsnippet



context math(context)
snippet Sup "sup_" iA
\sup\limits_{$1} $0
endsnippet

context math(context)
snippet `(?<!\\)bino` "transpose" A
^{\top} $0
endsnippet

context math(context)
snippet `(?<!\\)bino` "inverse" A
^{-1} $0
endsnippet

context math(context)
snippet cp "complement" iA
^{c} $0
endsnippet

context math(context)
snippet `(?<!\\)bino` "binomial coefficient" A
\binom{$1}{$2}$0
endsnippet


#---------Diacritics-----------#


context math(context)
snippet `(b|B)(ar)` "bar" A
\overline{$1} $0
endsnippet

priority 2
context math(context)
snippet `(\\?[a-zA-Z]\w*|\\[^(^\s]+\})(b|B)(ar)` "bar" A
\overline{``rv = m[1]``} $0
endsnippet

context math(context)
snippet `(t|T)(d)` "tilde" A
\widetilde{$1} $0
endsnippet

priority 2
context math(context)
snippet `([a-zA-Z]\w*)(t|T)(d)` "tilde" A
\widetilde{``rv = m[1]``} $0
endsnippet

context math(context)
snippet `([a-zA-Z]\w*)(ha|Ha)(t)` "hat" A
\hat{``rv = m[1]``} $0
endsnippet

context math(context)
snippet `([a-zA-Z]\w*)(b|B)(m)` "bm" A
\bm{``rv = m[1]``} $0
endsnippet


context math(context)
snippet s* "etoile" iA
^{\star} $0
endsnippet

context math(context)
snippet ** "asterisque" iA
^{\ast} $0
endsnippet

context math(context)
snippet `([a-zA-Z]\w*)(vec)` "Vector postfix" A
\vec{``rv = m[1]``} $0
endsnippet


#------over \ under------#

context math(context)
snippet __ "\underset{}{}" iA
\underset{$1}{$2} $0
endsnippet

priority 2
context math(context)
snippet b__ "\underbrace{}{}" iA
\underset{$1}{$2} $0
endsnippet

context math(context)
snippet ^^ "\overset{}{}" iA
\overset{$1}{$2} $0
endsnippet

priority 2
context math(context)
snippet b^^ "\overbrace{}{}" iA
\overset{$1}{$2} $0
endsnippet

#---------------Sets---------------#

context math(context)
snippet cup "union" iA
\cup $0
endsnippet


context math(context)
snippet cnel "Cancel" iA
\cancel{$1}$0
endsnippet


context math(context)
snippet dl "display style" iA
\displaystyle$0
endsnippet

context math(context)
snippet <> "\langle \rangle" iA
\langle $1 \rangle $0
endsnippet

context math(context)
snippet lr< "<>" iA
\left\langle $1 \right\\rangle $0
endsnippet

context math(context)
snippet l< "left<" iA
\left\langle $0
endsnippet

context math(context)
snippet r> "right>" iA
\right\\rangle $0
endsnippet


context math(context)
snippet lrp "()" iA
\left( $1 \right) $0
endsnippet

context math(context)
snippet lp "left(" iA
\left( $0
endsnippet

context math(context)
snippet rp "right)" iA
$1 \right) $0
endsnippet


context math(context)
snippet lrb "left{ right}" iA
\\left\\{ $1 \\right\\} $0
endsnippet

context math(context)
snippet lb "left{" iA
\left\{ $0
endsnippet

context math(context)
snippet rb "right}" iA
\right\} $0
endsnippet


context math(context)
snippet lrc "[]" iA
\left[ $1 \right] $0
endsnippet

context math(context)
snippet lc "left[" iA
\left[ $0
endsnippet

context math(context)
snippet rc "right]" iA
\right] $0
endsnippet

context math(context)
snippet ceil "ceil" iA
\lceil $1 \rceil $0
endsnippet

context math(context)
snippet Ceil "ceil" iA
\left\lceil $1 \right\rceil $0
endsnippet

context math(context)
snippet flr "floor" iA
\lfloor $1 \rfloor$0
endsnippet

context math(context)
snippet Flr "floor" iA
\left\lfloor $1 \right\rfloor$0
endsnippet

context math(context)
snippet abs "abs value" iA
\left| ${1} \right| $0
endsnippet

context math(context)
snippet l| "left|" iA
\left| $0
endsnippet

context math(context)
snippet r| "right|" iA
\right| $0
endsnippet

priority 2
context math(context)
snippet lr| "left|right|" iA
\left| $1 \right| $0
endsnippet


priority 2
context math(context)
snippet norm "norm" iA
\left\lVert $1 \right\rVert $0
endsnippet

context math(context)
snippet lnorm "left norm" iA
\left\lVert $0
endsnippet

context math(context)
snippet rnorm "right norm" iA
\right\rVert $0
endsnippet


context math(context)
snippet prod "product" wA
\prod\limits_{${1:i}=${2:1}}^{${3:\infty}} $0
endsnippet

priority 2
context math(context)
snippet sprod "small product" iA
\prod_{${1:i}=${2:1}}^{${3:\infty}} $0
endsnippet

priority 1
context math(context)
snippet coprod "coproduct" iA
\coprod_{${1:n}=${2:1}}^{${3:\infty}} $0
endsnippet

priority 1
context math(context)
snippet scup "disjoint union" wA
\sqcup $0
endsnippet

priority 2
context math(context)
snippet Scup "big disjoint union" wA
\bigsqcup_{${1:i}=${2:1}}^{${3:\infty}} $0
endsnippet

context math(context)
snippet Cup "big union" wA
\bigcup_{${1:i}=${2:1}}^{${3:\infty}} $0
endsnippet

context math(context)
snippet cap "intersection" iA
\cap $0
endsnippet

context math(context)
snippet Cap "big intersection" wA
\bigcap_{${1:i}=${2:1}}^{${3:\infty}} $0
endsnippet

context math(context)
snippet cc "subset | sous-ensemble |inclu dans" iA
\subset $0
endsnippet

priority 2
context math(context)
snippet ncc "nsubseteq" iA
\nsubseteq $0
endsnippet

context math(context)
snippet cc= "subseteq" iA
\subseteq $0
endsnippet

context math(context)
snippet subneq "subsetneq" iA
\subsetneq $0
endsnippet

priority 2
context math(context)
snippet ssups "supset" iA
\supset $0
endsnippet

priority 2
context math(context)
snippet nsup "nsupseteq" iA
\nsupseteq $0
endsnippet

priority 3
context math(context)
snippet ssup= "supseteq" iA
\supseteq $0
endsnippet

priority 3
context math(context)
snippet ssupn "supsetneq" iA
\supsetneq $0
endsnippet


context notmath(context)
snippet rf "\cref{}" iA
\cref{$1} $0
endsnippet

context notmath(context)
snippet Rf "\Cref{}" iA
\Cref{$1} $0
endsnippet

context notmath(context)
snippet hpr "\hyperref[]{}" iA
\hyperref[$1]{$2} $0
endsnippet

snippet lbl "\label{}" iA
\label{$1}
endsnippet



snippet %-- "------" wA
%────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
$0
endsnippet

context math(context)
snippet `([A-Za-z\d)}])\_([A-Za-z\d\-+][A-Za-z\d-+])` "auto subscript" A
`` rv = m[1]``_{``rv = m[2]``$1} $0
endsnippet

priority 2
context math(context)
snippet `([A-Za-z\d)}])\^([A-Za-z\d\-+][A-Za-z\d-+])` "auto supscript" A
`` rv = m[1]``^{``rv = m[2]``$1} $0
endsnippet